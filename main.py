from web3 import Web3
from rich import print
from rich.table import Table
from rich.panel import Panel
from dotenv import load_dotenv
import os
import questionary  # –ó–∞–º–µ–Ω—è–µ–º inquirer –Ω–∞ questionary

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('rpc_url.env')
load_dotenv('wallets.env')

# –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–∫–µ–Ω–∞—Ö
TOKEN_DATA = {
    'USDC': {
        'address': '0x078D782b760474a361dDA0AF3839290b0EF57AD6',
        'decimals': 6
    },
    'USDT': {
        'address': '0x588ce4f028d8e7b53b687865d6a67b3a54c75518',
        'decimals': 6
    }
}


def get_web3_connection():
    """–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RPC –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É"""
    rpc_urls = [
        os.getenv("INFURA_UNICHAIN_RPC"),
        os.getenv("ONFINALITY_UNICHAIN_RPC")
    ]

    for rpc_url in rpc_urls:
        try:
            web3 = Web3(Web3.HTTPProvider(rpc_url))
            if web3.is_connected():
                print(f"[green]‚úÖ Connected to RPC: {rpc_url[:30]}...[/green]")
                return web3
        except Exception as e:
            print(f"[yellow]‚ö†Ô∏è Connection error with {rpc_url[:30]}...: {str(e)}[/yellow]")
            continue

    print(Panel.fit("[red]‚ùå Could not connect to any RPC provider[/red]",
                    title="Connection Error",
                    border_style="red"))
    return None


def get_token_balance(web3, wallet_address, token_address):
    """–ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞"""
    try:
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ABI –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ balanceOf
        abi = '[{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"type":"function"}]'
        contract = web3.eth.contract(address=token_address, abi=abi)
        return contract.functions.balanceOf(wallet_address).call()
    except Exception as e:
        print(f"[yellow]‚ö†Ô∏è Token balance error: {str(e)}[/yellow]")
        return 0


def check_wallet_balances():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –∫–æ—à–µ–ª—å–∫–æ–≤"""
    web3 = get_web3_connection()
    if not web3:
        return False

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ—à–µ–ª—å–∫–∏
    wallets = {k: v.strip() for k, v in os.environ.items()
               if k.startswith('WALLET_') and v.strip()}

    if not wallets:
        print(Panel.fit("[red]‚ùå No valid wallets found in wallets.env[/red]",
                        title="Wallet Error",
                        border_style="red"))
        return False

    table = Table(title="üí∞ [bold]Unichain Wallet Balances[/]",
                  show_lines=True,
                  header_style="bold magenta")
    table.add_column("Wallet", style="cyan", no_wrap=True)
    table.add_column("Address", style="magenta", no_wrap=True)
    table.add_column("ETH", style="green", justify="right")
    table.add_column("USDC", style="blue", justify="right")
    table.add_column("USDT", style="yellow", justify="right")

    for wallet_name, address in wallets.items():
        try:
            # –û—á–∏—â–∞–µ–º –∞–¥—Ä–µ—Å –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–æ–∫
            address = address.strip()

            if not address.startswith('0x') or len(address) != 42:
                print(f"[yellow]‚ö†Ô∏è Invalid address format in {wallet_name}: {address}[/yellow]")
                continue

            checksum_address = Web3.to_checksum_address(address.lower())

            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
            eth_balance = web3.eth.get_balance(checksum_address)
            usdc_balance = get_token_balance(web3, checksum_address, TOKEN_DATA['USDC']['address'])
            usdt_balance = get_token_balance(web3, checksum_address, TOKEN_DATA['USDT']['address'])

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            eth_balance = web3.from_wei(eth_balance, 'ether')
            usdc_balance = usdc_balance / (10 ** TOKEN_DATA['USDC']['decimals'])
            usdt_balance = usdt_balance / (10 ** TOKEN_DATA['USDT']['decimals'])

            table.add_row(
                wallet_name,
                checksum_address,
                f"{eth_balance:.6f}",
                f"{usdc_balance:.2f}",
                f"{usdt_balance:.2f}"
            )

        except Exception as e:
            print(f"[red]‚ùå Error processing {wallet_name} ({address}): {str(e)}[/red]")
            continue

    print()
    print(table)
    print()
    return True


def get_module():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º questionary –≤–º–µ—Å—Ç–æ inquirer)
    """
    result = questionary.select(
        "Choose module",
        choices=[
            "1) –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å assets –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ Unichain",
            "2) –í—ã—Ö–æ–¥"
        ],
        qmark="‚öôÔ∏è ",
        pointer="‚úÖ "
    ).ask()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º .ask() –≤–º–µ—Å—Ç–æ .execute()
    return result


def main():

    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —É–ø—Ä–∞–≤–ª—è—é—â–∞—è –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º.
    """
    while True:
        os.system('cls' if os.name == 'nt' else 'clear')  # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏
        print(Panel.fit("[bold magenta]ü¶Ñ Unichain Wallet Balance Checker[/]",
                        border_style="bright_magenta"))

        module = get_module()

        if module == "1) –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å assets –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ Unichain":
            print("\n" + "=" * 50 + "\n")
            check_wallet_balances()
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
        elif module == "2) –í—ã—Ö–æ–¥":
            print(Panel.fit("[bold green]üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/]",
                            title="Exit",
                            border_style="green"))
            break


if __name__ == "__main__":
    main()